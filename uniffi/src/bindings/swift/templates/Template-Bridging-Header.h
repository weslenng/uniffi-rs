// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

typedef struct RustBuffer {
    int64_t len;
    uint8_t *_Nullable data;
} RustBuffer;

// Error definitions
// Each error has an error code enum, and a struct
{% for e in ci.iter_error_definitions() %}
  typedef enum {{e.name()}}Code {
    {{e.name()}}_NoError = 0{% if e.values().len() > 0 %},{% else %}{% endif %}
    {% for value in e.values() %}
    {{e.name()}}_{{value}} = {{loop.index}}{% if loop.last %}{% else %},{% endif %}
    {% endfor %}
  } {{e.name()}}Code;

  typedef struct Native{{e.name()}} {
    {{e.name()}}Code code;
    char *_Nullable message;
  } Native{{e.name()}};
{% endfor %}

{% for func in ci.iter_ffi_function_definitions() -%}
    {%- match func.return_type() -%}{%- when Some with (type_) %}{{ type_|ret_c }}{% when None %}void{% endmatch %} {{ func.name() }}(
      {% call swift::arg_list_rs_decl(func.arguments()) %}
    );
{% endfor -%}

{% import "macros.swift" as swift %}